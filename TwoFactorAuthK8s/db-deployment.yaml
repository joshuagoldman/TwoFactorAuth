---
apiVersion: v1
kind: Namespace
metadata:
  name: dev
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: WaitForFirstConsumer
---
# Define a 'Persistent Voulume Claim'(PVC) for postgres Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: postgres
    tier: database
  namespace: dev
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of postgres server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    tier: database
  namespace: dev
spec:
  selector: # psql Pod Should contain same labels
    matchLabels:
      app: postgres
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: postgres
        tier: database
    spec:
      containers:
        - image: postgres:latest # image from docker-hub
          name: postgres
          env:
            - name: POSTGRES_PASSWORD
              valueFrom :
                secretKeyRef :
                  name : postgres-secrets
                  key :  password

            - name: POSTGRES_DB # Setting Database Name from a 'ConfigMap'
              valueFrom :
                configMapKeyRef :
                  name : db-config
                  key :  dbName

            - name: POSTGRES_USER # SettinUser from a 'ConfigMap'
              valueFrom :
                secretKeyRef :
                  name : postgres-secrets
                  key :  user
            - name: PGDATA # SettinUser from a 'ConfigMap'
              valueFrom :
                 configMapKeyRef:
                  name : db-config
                  key :  pgData
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
            - name: postgres-persistent-storage
              mountPath: /var/lib/postgresql/data #This is the path in the container on which the mounting will take place.
      volumes:
        - name: postgres-persistent-storage # Obtaining 'vloume' from PVC
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
# Define a 'Service' To Expose postgres to Other Services
apiVersion: v1
kind: Service
metadata:
  name: postgres-service  # DNS name
  labels:
    app: postgres
    tier: database
  namespace: dev
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:       # postgres Pod Should contain same labels
    app: postgres
    tier: database
